{"tiddlers":{"$:/config/Cycle":{"title":"$:/config/Cycle","created":"20200922145100000","modified":"20200922145100000","tags":"","text":"0\n"},"$:/config/IgnoreKeyboardLayout":{"title":"$:/config/IgnoreKeyboardLayout","created":"20200512220816000","modified":"20200512220816000","tags":"","text":"0\n"},"$:/plugins/MaxGyver83/tw5-keyboard-navigation/config":{"title":"$:/plugins/MaxGyver83/tw5-keyboard-navigation/config","created":"20200511221340000","modified":"20200922145300000","tags":"","text":"<$checkbox tiddler=\"$:/config/IgnoreKeyboardLayout\" field=\"text\" checked=\"1\" unchecked=\"0\" default=\"0\"> Ignore keyboard layout (act as if it's QWERTY)</$checkbox><br>\n<$checkbox tiddler=\"$:/config/Cycle\" field=\"text\" checked=\"1\" unchecked=\"0\" default=\"0\"> Jump to first tiddler after end of list</$checkbox>\n"},"keyboard-navigation.css":{"title":"keyboard-navigation.css","created":"20190621094602422","modified":"20191101072404775","tags":"$:/tags/Stylesheet","type":"text/vnd.tiddlywiki","text":"div.tc-tiddler-frame.activeTiddler {\n  border-left: 3px solid #557AFF;\n}\n\n"},"keyboard-navigation.js":{"title":"keyboard-navigation.js","created":"20191026223026465","modified":"20210806201700000","module-type":"startup","tags":"","type":"application/javascript","text":"(function () {\n\n/*jslint node: false, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nexports.name = \"tw5-keyboard-navigation\"; exports.after = [\"rootwidget\"];\n\nexports.startup = function () {\n\n// Keybinds section\nconst navigate_up_key = 'k'\nconst navigate_down_key = 'j'\nconst bindings = {\n\t'more-tiddler-actions': 'm',\n\tinfo: null,\n\t'new-here': null,\n\t'new-journal-here': null,\n\tclone: null,\n\t'export-tiddler': null,\n\tedit: 'e',\n\tdelete: null,\n\tpermalink: null,\n\tpermaview: null,\n\t'open-window': null,\n\t'close-others': null,\n\tclose: 'c',\n\t'fold-others': null,\n\tfold: null\n}\n// if you're using an alternative keyboard layout,\n// provide a list of key codes which should be ignored\nconst alternativeLayoutIgnoreKeys = [\"ArrowUp\"]\n// if you just want to add/change keybindings, you don't need to look further\n\n// tiddler buttons have classnames in the form `BTN_CLASSNAME_PREFIX`{button name}\nconst BTN_CLASSNAME_PREFIX = 'tc-btn-%24%3A%2Fcore%2Fui%2FButtons%2F'\n// all transitions with `navigate_up_key` and `navigate_down_key` are instant\nconst INSTANT_NAVIGATION = false;\n// if navigated before x milliseconds, transition is instant\nconst INSTANT_NAVIGATION_BEFORE = 800;\n\nconst MARK_CURRENT_TIDDLER = true;\n// tiddler's top position should be +/- LIMIT pixels in order to be considered the topmost\nconst LIMIT = 50;\n\nvar ignoreKeyboardLayout = false;\nvar cycle = false;\nvar tiddlers;\nvar tiddler_index = -1;\nvar tiddler_title = \"\";\nvar timestamp_last_navigation = 0;\n\n// unselect search box on startup\nvar activeElement = document.activeElement;\nactiveElement.blur();\n\n// mark first tiddler on startup\ntiddlers = document.getElementsByClassName(\"tc-tiddler-frame\");\nif (tiddlers.length > 0) {\n\ttiddler_index = 0;\n\tif (MARK_CURRENT_TIDDLER) {\n\t\ttiddlers[tiddler_index].classList.add(\"activeTiddler\");\n\t}\n}\n\n\n// refresh active tiddler marker after page refresh (p.e. after closing or editing a tiddler)\n$tw.hooks.addHook(\"th-page-refreshed\", function() {\n\ttiddlers = document.getElementsByClassName(\"tc-tiddler-frame\");\n\n\tif (!MARK_CURRENT_TIDDLER) return;\n\tif (tiddler_index < 0 && tiddlers.length) tiddler_index = 0;\n\n\t// if tiddler_index > last_visible_index, select the last visible tiddler\n\tvar last_visible_index = tiddlers.length - 1;\n\twhile (last_visible_index >= 0 && tiddlers[last_visible_index].style.opacity === \"0\") {\n\t\tlast_visible_index--;  // might be -1\n\t}\n\tif (tiddler_index > last_visible_index) {\n\t\ttiddler_index = last_visible_index;\n\t}\n\tif (tiddler_index < 0) return;\n\n\t// if the current tiddler is invisible, find the next visible one\n\tvar i = tiddler_index;\n\twhile (i < tiddlers.length && tiddlers[i].style.opacity === \"0\") {\n\t\ti++;\n\t}\n\t// if no visible tiddler was found, search upwards\n\tif (i == tiddlers.length) {\n\t\ti = tiddler_index;\n\t\twhile (i >= 0 && tiddlers[i].style.opacity === \"0\") {\n\t\t\ti--;\n\t\t}\n\t}\n\ttiddler_index = i;\n\tupdateActiveTiddlerClass();\n});\n\n\n// get name of new/edited tiddler after saving\n$tw.hooks.addHook(\"th-saving-tiddler\", function(tiddler) {\n\ttiddler_title = tiddler.getFieldString(\"title\");\n\treturn tiddler;\n});\n\n\n// mark new tiddler after navigating to it\n$tw.hooks.addHook(\"th-navigating\", function(event) {\n\ttiddler_title = event.navigateTo;\n\ttiddlers = document.getElementsByClassName(\"tc-tiddler-frame\");\n\tfor (var i=0; i<tiddlers.length; i++) {\n\t\tif (tiddlers[i].getAttribute(\"data-tiddler-title\") == tiddler_title) {\n\t\t\tif (MARK_CURRENT_TIDDLER) {\n\t\t\t\tif (tiddlers[tiddler_index] !== undefined)\n\t\t\t\t\ttiddlers[tiddler_index].classList.remove(\"activeTiddler\");\n\t\t\t\ttiddlers[i].classList.add(\"activeTiddler\");\n\t\t\t}\n\t\t\ttiddler_index = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn event;\n});\n\n\nfunction updateActiveTiddlerClass() {\n\tfor (var i=0; i<tiddlers.length; i++) {\n\t\tif (i != tiddler_index) {\n\t\t\ttiddlers[i].classList.remove(\"activeTiddler\");\n\t\t}\n\t}\n\ttiddlers[tiddler_index].classList.add(\"activeTiddler\");\n}\n\nfunction getActiveTiddlersTitle() {\n\ttiddler_title = (tiddler_index < 0) ? \"\" : tiddlers[tiddler_index].getAttribute(\"data-tiddler-title\");\n}\n\n\nfunction isInViewport(el) {\n\tvar rect = el.getBoundingClientRect();\n\treturn (\n\t\trect.bottom > 0 &&\n\t\trect.top < (window.innerHeight || document.documentElement.clientHeight)\n\t);\n}\n\n\nfunction isElementCloseToTop(el) {\n\tvar rect = el.getBoundingClientRect();\n\treturn (rect.top >= -LIMIT && rect.top <= LIMIT);\n}\n\n\nfunction findTopmostTiddler(tiddlers) {\n\tvar i = 0;\n\twhile (i < tiddlers.length && tiddlers[i].getBoundingClientRect().top <= -LIMIT) {\n\t\ti++;\n\t}\n\treturn i;\n}\n\n\nfunction switchTiddler(scrollTo) {\n\tif (scrollTo) {\n\t\tif (INSTANT_NAVIGATION ||\n\t\t\t\tDate.now() - timestamp_last_navigation < INSTANT_NAVIGATION_BEFORE) {\n\t\t\t// if user navigates quickly or wants to navigate instantly,\n\t\t\t// jump instantly to next or previous tiddler\n\t\t\ttiddlers[tiddler_index].scrollIntoView();\n\t\t} else {\n\t\t\t// scroll smoothly to next or previous tiddler\n\t\t\ttiddlers[tiddler_index].scrollIntoView(\n\t\t\t\t{behavior: \"smooth\", block: \"start\", inline: \"nearest\"});\n\t\t}\n\t}\n\ttimestamp_last_navigation = Date.now();\n\tif (MARK_CURRENT_TIDDLER) {\n\t\tupdateActiveTiddlerClass();\n\t}\n\tgetActiveTiddlersTitle();\n}\n\ndocument.onclick = function(e) {\n\tvar elem = e.target;\n\n\twhile (elem && !elem.classList.contains(\"tc-tiddler-frame\")) {\n\t\telem = elem.parentElement;\n\t}\n\tif (!elem) return;\n\tconst titleOfClickedTiddler = elem.getAttribute(\"data-tiddler-title\");\n\ttiddlers = document.getElementsByClassName(\"tc-tiddler-frame\");\n\tfor (var i=0; i<tiddlers.length; i++) {\n\t\tif (tiddlers[i].getAttribute(\"data-tiddler-title\") == titleOfClickedTiddler) {\n\t\t\ttiddler_index = i;\n\t\t\tswitchTiddler(false);\n\t\t\treturn;\n\t\t}\n\t}\n}\n\n\ndocument.onkeydown = function(e) {\n\tif (e.ctrlKey || e.altKey || e.metaKey || e.shiftKey) return;\n\n\tvar activeElement = document.activeElement;\n\tif (activeElement && activeElement.tagName.toLowerCase() == \"textarea\") return;\n\tif (activeElement && activeElement.tagName.toLowerCase() == \"input\"\n\t\t\t&& activeElement.type == \"search\"\n\t\t\t&& activeElement.classList.contains(\"tc-popup-handle\")) {\n\t\tif (e.key == \"Tab\" || e.key == \"Enter\") {\n\t\t\t// if in search box and there are matches, jump to (and open) first match\n\t\t\tvar searchItems = document.querySelector(\"div.tc-search-results div.tc-menu-list-item\")\n\t\t\tif (searchItems) {\n\t\t\t\tsearchItems.children[0].focus();\n\t\t\t\tif (e.key == \"Enter\") {\n\t\t\t\t\t// when Enter was pressed, also open the first match\n\t\t\t\t\tsearchItems.children[0].click();\n\t\t\t\t}\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t}\n\t}\n}\n\ndocument.onkeyup = function(e) {\n\tif (e.ctrlKey || e.altKey || e.metaKey || e.shiftKey) return;\n\n\tvar activeElement = document.activeElement;\n\tif (activeElement && activeElement.tagName.toLowerCase() == \"textarea\") return;\n\tif (activeElement && activeElement.tagName.toLowerCase() == \"input\") {\n\t\tif (e.code == \"Escape\") {\n\t\t\t// check if search drop down menu is open\n\t\t\tvar dropdown = document.querySelector(\"div.tc-search-drop-down\");\n\t\t\tif (dropdown) {\n\t\t\t\t// if (dropdown[0].classList.contains\n\t\t\t\tvar elem = dropdown.parentNode.parentNode;\n\t\t\t\telem.querySelector(\"svg.tc-image-close-button\");\n\t\t\t\tif (elem && elem.parentNode) {\n\t\t\t\t\telem.parentNode.click();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// unfocus search box\n\t\t\tactiveElement.blur();\n\t\t\t//window.focus();\n\t\t}\n\t\treturn;\n\t}\n\tif (e.code == \"Escape\") {\n\t\t// menu = document.getElementsByClassName(\"tc-drop-down\");\n\t\tvar menu = document.querySelector(\"div.tc-drop-down\");\n\t\tif (menu) {\n\t\t\tmenu.parentElement.previousSibling.click();\n\t\t}\n\t}\n\n\n\ttiddlers = document.getElementsByClassName(\"tc-tiddler-frame\");\n\tif (tiddlers.length == 0) return;\n\n\tvar tiddlerIgnoreKeyboardLayout = $tw.wiki.getTiddler(\"$:/config/IgnoreKeyboardLayout\");\n\tignoreKeyboardLayout = (tiddlerIgnoreKeyboardLayout.fields.text.trim() == \"1\");\n\n\tvar tiddlerCycle = $tw.wiki.getTiddler(\"$:/config/Cycle\");\n\tcycle = (tiddlerCycle.fields.text.trim() == \"1\");\n\n\tvar down_key_released = ignoreKeyboardLayout ? (e.code == \"Key\" + navigate_down_key.toUpperCase())\n\t                                             : (e.key == navigate_down_key);\n\tvar up_key_released = ignoreKeyboardLayout ? (e.code == \"Key\" + navigate_up_key.toUpperCase())\n\t                                           : (e.key == navigate_up_key);\n\tvar other_bind_used = Object.keys(bindings).find(k => {\n\t\tif (!bindings[k]) return false;\n\t\tif (ignoreKeyboardLayout)\n\t\t\treturn e.code == (\"Key\" + bindings[k].toUpperCase()) &&\n\t\t\t       !alternativeLayoutIgnoreKeys.find(ak => ak == e.key);\n\t\treturn e.key == bindings[k];\n\t})\n\n\tif (tiddler_title) {\n\t\tif (tiddler_index < 0 || tiddler_index >= tiddlers.length ||\n\t\t        tiddlers[tiddler_index].getAttribute(\"data-tiddler-title\") != tiddler_title) {\n\t\t\ttiddler_index = -1;\n\t\t\t// find correct index (after editing or creating a new tiddler)\n\t\t\tfor (var i=0; i<tiddlers.length; i++) {\n\t\t\t\tif (tiddlers[i].getAttribute(\"data-tiddler-title\") == tiddler_title) {\n\t\t\t\t\ttiddler_index = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (down_key_released || up_key_released || other_bind_used) {\n\t\tif (tiddler_index < 0 || (!isInViewport(tiddlers[tiddler_index]) &&\n\t\t                          !isElementCloseToTop(tiddlers[tiddler_index]))) {\n\t\t\ttiddler_index = findTopmostTiddler(tiddlers);\n\t\t\tif (down_key_released) tiddler_index -= 1;\n\t\t}\n\t\tif (down_key_released || up_key_released) {\n\t\t\tif (down_key_released) {\n\t\t\t\t// go down\n\t\t\t\ttiddler_index += 1;\n\t\t\t\tif (tiddler_index >= tiddlers.length)\n\t\t\t\t\ttiddler_index = cycle ? 0 : tiddlers.length - 1;\n\t\t\t} else if (up_key_released) {\n\t\t\t\t// go up\n\t\t\t\ttiddler_index -= 1;\n\t\t\t\tif (tiddler_index < 0)\n\t\t\t\t\ttiddler_index = cycle ? tiddlers.length - 1 : 0;\n\t\t\t}\n\t\t\tswitchTiddler(true);\n\t\t} else {\n\t\t\tif (tiddlers[tiddler_index] === undefined) return;\n\t\t\tif (!isInViewport(tiddlers[tiddler_index])) return;\n\t\t\tvar button = tiddlers[tiddler_index].\n\t\t\t\t\t\t\tgetElementsByClassName(BTN_CLASSNAME_PREFIX+other_bind_used)[0];\n\t\t\tif (!button) return;\n\t\t\tbutton.click();\n\t\t\tif (other_bind_used == 'close' || other_bind_used == 'delete') {\n\t\t\t\ttiddlers[tiddler_index].classList.remove(\"activeTiddler\");\n\t\t\t\tif (tiddlers.length == 1) {\n\t\t\t\t\ttiddler_index = -1;\n\t\t\t\t} else { // tiddlers.length >= 2\n\t\t\t\t\tif (tiddler_index >= tiddlers.length - 1) { // last tiddler selected\n\t\t\t\t\t\ttiddler_index = tiddlers.length - 2; // select second to last tiddler\n\t\t\t\t\t\tif (MARK_CURRENT_TIDDLER)\n\t\t\t\t\t\t\ttiddlers[tiddler_index].classList.add(\"activeTiddler\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (MARK_CURRENT_TIDDLER)\n\t\t\t\t\t\t\t// use tiddler_index + 1 because the `tiddlers` array wasn't yet updated\n\t\t\t\t\t\t\ttiddlers[tiddler_index+1].classList.add(\"activeTiddler\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tgetActiveTiddlersTitle();\n\t\t}\n\t}\n};\n\n}\n\n})();\n"},"$:/plugins/MaxGyver83/tw5-keyboard-navigation/readme":{"title":"$:/plugins/MaxGyver83/tw5-keyboard-navigation/readme","created":"20191103104315571","modified":"20210806213200000","tags":"","text":"This plugin enables some global shortcuts for comfortable navigation without a mouse.\n\n!! How to use\nPress <kbd>Esc</kbd> to unfocus the sidebar search field.\nThen you can jump to the next or previous open tiddler in the story river by pressing <kbd>j</kbd> or <kbd>k</kbd>, respectively (inspired by [[vim|https://www.vim.org/]]).\nPress <kbd>e</kbd> if you want to edit the current tiddler. Press <kbd>Ctrl</kbd>+<kbd>Return</kbd> when you're done (as usual).\n<kbd>c</kbd> is for closing a tiddler. <kbd>m</kbd> opens the \"more tiddler actions\" menu.\n\nWhen you search your TiddlyWiki (<kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>f</kbd> by default), just press <kbd>Return</kbd> to open or <kbd>Tab</kbd> to focus the first match (without this plugin you have to press <kbd>Tab</kbd> four times).\n\n<kbd>Esc</kbd> also closes the search result popup window or \"more tiddler actions\" menu.\n\n!! Source code\nThere is a public [[github repository|https://github.com/MaxGyver83/tw5-keyboard-navigation]] for `tw5-keyboard-navigation`.\n\n!! Author\n[[Max Schillinger|https://www.maximilian-schillinger.de]]\n\n!! Contributers\n[[Soren Bjornstad|https://github.com/sobjornstad]]\n[[Tadeáš Paule|https://github.com/tadeaspaule]]\n"}}}